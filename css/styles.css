/*Mecanismo para declarar variables en CSS*/
:root {
    --white: #ffffff;
    --dark: #212121;
    --primary: #ffc107;
    --secondary: rgb(34, 135, 194);
    --tertiary: rgb(248, 241, 134);
    --alternative: #d5e5ec;
    --principalfont: 3.8rem;
}

/*Código css para programar con una equivalencia de 1rem=10px*/
html {
    font-size: 62.5%;
    box-sizing: border-box;
    scroll-snap-type: y mandatory;
}

.servicios,
.navegacion-principal,
.formulario {
    scroll-snap-align: center;
    scroll-snap-stop: always;
}

*, *:before, *:after {
    box-sizing: inherit;
}

body {
    font-size: 16px;
    font-family: 'Montserrat', sans-serif;
    background-image: linear-gradient(to top, var(--alternative) 0%, var(--white) 100%);
}




/*Los estilos pueden aplicarse a los elementos del html de forma directa*/
h1 {
    text-align: center;
    color: blue;
    /*text-transform: uppercase;*/
    font-size: var(--principalfont);
}

h2 {
    font-size: var(2.8rem);
}

h3 {
    font-size: var(1.8rem);
}

h1 span {
    font-size: 2rem;
    
}

h1, h2, h3 {
    /*align-items: center;*/
    text-align: center;
}


/*Si bien css toma el último estilo presentado (lee el código de arriba a abajo) 
La especificidad consiste en que mientras más específico sea el llamado más probable es que
este estilo se aplique indistintamente de su ubicación*/
h1.titulo span {
    color: var(--secondary);
}

/*A las clases usando .className {}*/
.titulo {
    color: var(--primary); /*El h1 coincide con el de clase "titulo" por tanto css aplica el último estilo*/
}




/*En combinaciones de descendentes .className .subclassName {}*/
.titulo span {
    font-size: 1.5rem;
}

/*A los id's usando #id {}*/

/*A los parrafos hijos por ejemplo .className > p{}*/
/*A objetos con algun atributo ejemplo: [src="loco.jpg"]*/

.contenedor {
    max-width: 250rem; /*Aplica estas caracteristicas hasta 1200 pixeles:120 rem*/
    margin: 1%; /*Margen desde la parte superior, derecha, inferior e izquierda respectivamente*/
}

.boton,.submit {
    background-color: var(--secondary);
    color: var(--white);
    padding: 1rem 3rem; /*Son los márgenes superior-inferior y laterales a partir del texto*/
    margin-top: 1rem; /*Le da la separación respecto al parrafo superior (Milagro,Guayas)*/
    font-size: 1.5rem;
    font-weight: bold;
    text-decoration: none;
    text-transform: uppercase;
    border-radius: 0.5rem; /*Le da el efecto de contorno redondeado*/
    width: auto; /*100% implica que el boton se verá en todo el ancho de la pantalla*/
    text-align: center;
    border: none;
}

/*Configuración para que solo en las tablets y laptos se vea un botón pequeño*/
@media (max-width: 480px) {
    .submit {
        width: 100%;
    }
}

.boton:hover {
    cursor: pointer;
}

.sombra {
    box-shadow: 2px 4px 23px -3px var(--secondary);
    background-color: var(--white);
    padding: 2rem;
    border-radius: 1rem;
}

.nav-bg {
    background-color: var(--secondary);
}

.navegacion-principal {
    /*Aplicación de FLEXBOX*/
    display: flex; /*Habilita la distribución deseada de los elementos dentro del menú*/
    flex-direction: column;  /*Permite cambiar la dirección de los elementos por default viene "row"*/
    align-items: center;/*Alinea los elementos cuando el flex-direction es "column"*/
}

/*Cuando colocas "a" refiere a las referencias*/
.navegacion-principal a {
    /*background-color: var(--primary);*/
    color: var(--white);
    text-decoration: none;
    font-size: 2rem;
    font-weight: bold;
    padding: 1.5rem;
}
/*Configuración cuando se pasa el puntero del mouse por el menú*/
.navegacion-principal a:hover { /*visited:cuando se ha visitado el sitio*/
    color: var(--dark);
    background-color: var(--primary);
}

/*focus:Configuración cuando se ha clickado elemento actual del menú*/
.navegacion-principal a:focus {
    color: var(--dark);
}


p {
    display: block; 
    /*Display hace alusión a la forma de cómo están dispuestos los elementos:
    "block", por ejemplo, dispone los elementos uno debajo del otro. "inline", los despliega 
    de izquierda a derecha*/
}


/*Implementación de mediaquery*/

/*Se normaliza la insercion de Media Queries con el siguiente procedimiento aqui en VS-Code:
1. Ctrl+Shift+P
2. User snipets (configure)
3. CSS (json)*/


/*Permite aplicar una apariencia dependiendo del tamaño del dispositivo
útil para crear responsive-design*/

/*Aplicar cuando el tamaño sea mínimo 480 px lo siguiente: (útil para diferenciar con dispositivos móviles)*/
@media (min-width: 480px) {
    .navegacion-principal {
        flex-direction: row;
        justify-content: space-between; /*Se selecciona la distribución deseada, en 
        este caso "space-between" permite espaciar los elementos internos*/
    }
}


/*Tamaño usalmente utilizado para diferenciar tablets*/
/*
@media (min-width: 768px) { 
    body {
        background-color: rgb(26, 184, 26);
    }
}
*/

.hero {
    background-image: url(../images/wd.jpg);
    background-repeat: no-repeat; /*No repite la imagen si el ancho de la página es mayor que el de la imagen*/
    background-size: cover; /*Cubre la imagen a lo ancho de la pagina*/
    height: 410px;
    /*padding: 20px;*/
    position: relative; /*Si quiero que un hijo (de hero en este caso) tenga posición absoluta
    debo colocarle al padre position: relative*/
}

.contenido-hero {
    position: absolute;
    background-color: rgba(0, 0, 0, 0.7); /*Alpha (el ultimo valor) representa el porcentaje del color 
    en elemento. En este caso el 70% crea el efecto sombra sobre el objeto imagen*/
    width: 100%;
    height: 100%;

    display: flex;
    flex-direction: column;
    align-items: center; /*Alineación horizontal*/
    justify-content: center; /*Alineación vertical*/
}

.contenido-hero h2,
.contenido-hero p {
    color: var(--white);
}

.ubicacion {
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
}

/*Programación para que se vean 3 columnas en tablets y sitios web (excepto móviles)*/
@media (min-width: 768px) {
    .servicios {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr; /*fr: fracciones iguales, Ej: Si coloco 1fr 1fr
        divide el template en 2 columnas iguales, 1fr 1fr 1fr en 3 iguales y así sucesivamente;
        siempre que el ancho de columna sea el mismo, se puede suprimir el anterior código por
        el siguiente: repeat(3,1fr) */
        column-gap: 2rem; /*Separación entre columnas*/
    }
}

.servicio {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.servicio h3 {
    color: var(--secondary);
    font-weight: normal;
}

.servicio p {
    line-height: 2.5rem;
}

.servicio .iconos{
    height: 15rem;
    width: 15rem;
    background-color: var(--primary);
    border-radius: 50%;
    display: flex;
    justify-content: center; /*space-evenly serviría si tengo más de un ícono en el mismo div*/
    align-items: center;
}

@media (max-width: 480px) {
    .servicio p {
        text-align: center;
    }
}

.formulario {
    background-color: var(--tertiary);
    width: min(60rem, 100%); /*Toma el valor más pequeño entre dos*/
    /*En este caso, como el formulario no es muy ancho, lo ajusta a 600 px (60rem) 
    o al 100% del ancho tomando siempre al más pequeño entre ambos*/
    margin: auto; /*Se usa margin cuando la clase no tiene padre con display:flex*/
    /*Si fuera este el caso sería útil usar justify-content*/
    padding: 2rem;
    border-radius: 1rem;
}

@media (min-width: 768px) {
    .formulario {
        width: min(100rem, 100%);
    }
}

/*Edición de propiedades por default del formulario*/
.formulario fieldset {
    border: none; /*Le quita el borde*/
}

.formulario legend {
    text-align: center;
    font-size: 1.8rem;
    text-transform: uppercase;
    font-weight: 700;
    margin-bottom: 2rem;
    color: var(--secondary);
}

.formulario .boton-submit {
    display: flex;
    justify-content: flex-end;
}

@media (min-width: 768px) {
    .contenedor-campos {
        display: grid;
        grid-template-columns: 50% 50%;
        grid-template-rows: auto auto 20rem;
        column-gap: 1rem;
    }
    
    .campo:nth-child(3),
    .campo:nth-child(4) { /*Selecciona al tercer hijo de clase llamado "campo" en este caso el correo*/
        grid-column: 1 / 3;
    }
}

.campo {
    margin-bottom: 1rem;
}

.campo label {
    color: var(--secondary);
    font-weight: bold;
    margin-bottom: 0.5rem;
    display: block;
}

.campo textarea {
    height: 15rem;
}

/*.contenedor input [type="text"] {}*/ 

.input-text {
    width: 100%;
    border: none;
    padding: 1.5rem;
    border-radius: 0.5rem;
}

.footer {
    text-align: center;
}